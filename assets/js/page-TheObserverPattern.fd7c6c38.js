(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{506:function(e,t,a){"use strict";a.r(t);var r=a(1),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"the-observer-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-observer-pattern"}},[e._v("#")]),e._v(" The Observer Pattern")]),e._v(" "),a("h2",{attrs:{id:"what-problems-does-the-observer-pattern-seek-to-solve"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-problems-does-the-observer-pattern-seek-to-solve"}},[e._v("#")]),e._v(" What problems does the Observer Pattern seek to solve?")]),e._v(" "),a("ul",[a("li",[e._v("It seeks to solve the problem of trying to keep a bunch of elements tied and synced with the same data. This tied with ES6 should allow you to create a very functional app that doesn't break when having multiple functions on elements.")])]),e._v(" "),a("h2",{attrs:{id:"what-are-the-three-mechanisms-of-the-observer-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-the-three-mechanisms-of-the-observer-pattern"}},[e._v("#")]),e._v(" What are the three mechanisms of the observer pattern?")]),e._v(" "),a("ul",[a("li",[e._v("The three main mechanisms of the observer patter are: subscribe- adds new observable events, unsubscribed- removes observable events, and broadcast- executes all events with bound data.")])]),e._v(" "),a("h2",{attrs:{id:"review-the-code-generated-from-the-bcw-template-and-reflect-on-the-proxy-objects-from-yesterday-and-your-understanding-of-the-observer-pattern-today-with-this-knowledge-explain-how-the-magic-of-the-bcw-template-uses-these-two-concepts-to-manage-and-update-the-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#review-the-code-generated-from-the-bcw-template-and-reflect-on-the-proxy-objects-from-yesterday-and-your-understanding-of-the-observer-pattern-today-with-this-knowledge-explain-how-the-magic-of-the-bcw-template-uses-these-two-concepts-to-manage-and-update-the-dom"}},[e._v("#")]),e._v(" Review the code generated from the bcw-template and reflect on the proxy objects from yesterday, and your understanding of the observer pattern today. With this knowledge, explain how the magic of the bcw-template uses these two concepts to manage and update the dom.")]),e._v(" "),a("ul",[a("li",[e._v("In the bcw-template the ProxyState is observed a ton to see if certain data peices in it  change. For instance, if a certain array in the ProxyState like Tasks:[] is updated you want the screen to update the html to represent whatever change has occured. This is done by watching the state with a certain key passed in. In the example above the key that was passed in would be the Tasks array.")])]),e._v(" "),a("p",[e._v("(group project)")])])}),[],!1,null,null,null);t.default=s.exports}}]);